{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8805255,"sourceType":"datasetVersion","datasetId":5295659}],"dockerImageVersionId":30762,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/alihassanshahid/water-quality-monitoring-ml-model?scriptVersionId=197749085\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Water Quality Monitoring using Supervised Machine Learning\n# 1.1 Intro","metadata":{}},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-22T06:58:36.156402Z","iopub.execute_input":"2024-09-22T06:58:36.156825Z","iopub.status.idle":"2024-09-22T06:58:36.485777Z","shell.execute_reply.started":"2024-09-22T06:58:36.156786Z","shell.execute_reply":"2024-09-22T06:58:36.484924Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/water-quality-monitoring-dataset/brisbane_water_quality.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-09-22T06:57:13.664375Z","iopub.execute_input":"2024-09-22T06:57:13.665053Z","iopub.status.idle":"2024-09-22T06:57:13.822129Z","shell.execute_reply.started":"2024-09-22T06:57:13.665012Z","shell.execute_reply":"2024-09-22T06:57:13.820968Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-22T06:57:15.819606Z","iopub.execute_input":"2024-09-22T06:57:15.820353Z","iopub.status.idle":"2024-09-22T06:57:15.85347Z","shell.execute_reply.started":"2024-09-22T06:57:15.820312Z","shell.execute_reply":"2024-09-22T06:57:15.852402Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-22T06:57:18.319574Z","iopub.execute_input":"2024-09-22T06:57:18.320022Z","iopub.status.idle":"2024-09-22T06:57:18.325879Z","shell.execute_reply.started":"2024-09-22T06:57:18.319986Z","shell.execute_reply":"2024-09-22T06:57:18.324994Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 1.2 Impute Missing Values","metadata":{}},{"cell_type":"code","source":"# Missing values\nmissing_values = df.isnull().sum().sort_values(ascending=False)\nmissing_values = missing_values[missing_values > 0]\nprint(missing_values)\n\n# Handle missing values: fill or drop\ndf = df.dropna()  # Or df.fillna(value) to fill\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T06:57:22.771539Z","iopub.execute_input":"2024-09-22T06:57:22.771919Z","iopub.status.idle":"2024-09-22T06:57:22.799245Z","shell.execute_reply.started":"2024-09-22T06:57:22.771883Z","shell.execute_reply":"2024-09-22T06:57:22.798229Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 1.3 Removing Outliers","metadata":{}},{"cell_type":"code","source":"from scipy import stats\n\n# Z-scores for detecting outliers\nz_scores = stats.zscore(df.select_dtypes(include='number'))\n\n# Threshold for outliers (you can set it to 3 standard deviations)\noutliers = (z_scores > 3).sum(axis=1)\noutlier_rows = df[outliers > 0]\nprint(outlier_rows)\n\n# You can visualize outliers using boxplots as well (as shown earlier).\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T06:57:27.551565Z","iopub.execute_input":"2024-09-22T06:57:27.552218Z","iopub.status.idle":"2024-09-22T06:57:27.995178Z","shell.execute_reply.started":"2024-09-22T06:57:27.552178Z","shell.execute_reply":"2024-09-22T06:57:27.994247Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 1.4 Data Visualizations","metadata":{}},{"cell_type":"markdown","source":"## 1.4.1 Polar plot for water direction and speed","metadata":{}},{"cell_type":"code","source":"# Polar plot for water direction and speed\ndf_sample = df.head(1000)  # For readability, use a sample\n\nplt.figure(figsize=(10, 8))\nax = plt.subplot(111, projection='polar')\n\n# Convert degrees to radians for plotting\nangles = np.deg2rad(df_sample['Average Water Direction'])\nspeeds = df_sample['Average Water Speed']\n\n# Create the polar plot\nax.scatter(angles, speeds, c=speeds, cmap='coolwarm', alpha=0.75)\nax.set_title('Polar Plot of Water Direction and Speed', fontsize=16)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T07:14:56.898687Z","iopub.execute_input":"2024-09-22T07:14:56.899412Z","iopub.status.idle":"2024-09-22T07:14:57.359342Z","shell.execute_reply.started":"2024-09-22T07:14:56.899366Z","shell.execute_reply":"2024-09-22T07:14:57.358415Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 1.4.2 Violin plot comparing 'Chlorophyll' values based on quality","metadata":{}},{"cell_type":"code","source":"# Violin plot comparing 'Chlorophyll' values based on quality\nplt.figure(figsize=(12, 8))\nsns.violinplot(x='Chlorophyll [quality]', y='Chlorophyll', data=df, split=True)\nplt.title('Violin Plot of Chlorophyll Distribution by Quality', fontsize=16)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T06:58:42.997171Z","iopub.execute_input":"2024-09-22T06:58:42.998196Z","iopub.status.idle":"2024-09-22T06:58:43.479812Z","shell.execute_reply.started":"2024-09-22T06:58:42.998139Z","shell.execute_reply":"2024-09-22T06:58:43.478673Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 1.4.3 Network Graph (In Progress)","metadata":{}},{"cell_type":"code","source":"import networkx as nx\n\n# Drop non-numeric columns for correlation calculation\nnumeric_df = df.drop(columns=['Timestamp', 'Record number', 'Chlorophyll [quality]'])\n\n# Calculate the correlation matrix\ncorr_matrix = numeric_df.corr()\n\n# Create a network graph from the correlation matrix\nG = nx.Graph()\n\n# Add nodes\nfor col in corr_matrix.columns:\n    G.add_node(col)\n\n# Add edges (only strong correlations for clarity)\nthreshold = 0.6\nfor i in range(len(corr_matrix.columns)):\n    for j in range(i):\n        if abs(corr_matrix.iloc[i, j]) > threshold:\n            G.add_edge(corr_matrix.columns[i], corr_matrix.columns[j], weight=corr_matrix.iloc[i, j])\n\n# Draw the graph\nplt.figure(figsize=(12, 12))\npos = nx.spring_layout(G)  # Positions the nodes\nedges = G.edges(data=True)\n\nnx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=3000, font_size=10)\nnx.draw_networkx_edges(G, pos, width=[d['weight'] * 5 for (u, v, d) in edges], edge_color='grey')\nplt.title('Correlation Matrix as a Network Graph', size=16)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T07:15:33.315401Z","iopub.execute_input":"2024-09-22T07:15:33.315795Z","iopub.status.idle":"2024-09-22T07:15:33.714755Z","shell.execute_reply.started":"2024-09-22T07:15:33.315758Z","shell.execute_reply":"2024-09-22T07:15:33.713802Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 1.4.4 Histogram for numeric values","metadata":{}},{"cell_type":"code","source":"df_sample = df.head(500)\n# Plot histograms for each numeric column\ndf_sample.hist(figsize=(16, 12), bins=20)\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T07:39:54.602513Z","iopub.execute_input":"2024-09-22T07:39:54.603185Z","iopub.status.idle":"2024-09-22T07:39:58.424927Z","shell.execute_reply.started":"2024-09-22T07:39:54.60314Z","shell.execute_reply":"2024-09-22T07:39:58.423987Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 1.4.5 Boxplot to visualize outliers (In Progress)","metadata":{}},{"cell_type":"code","source":"# Boxplot to visualize outliers for each variable\nplt.figure(figsize=(16, 10))\nsns.boxplot(data=df.drop(columns=['Timestamp', 'Record number']))\nplt.xticks(rotation=45)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-22T07:40:01.773243Z","iopub.execute_input":"2024-09-22T07:40:01.773904Z","iopub.status.idle":"2024-09-22T07:40:02.322738Z","shell.execute_reply.started":"2024-09-22T07:40:01.773861Z","shell.execute_reply":"2024-09-22T07:40:02.321758Z"},"_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 1.4.6 Time Series Analysis ","metadata":{}},{"cell_type":"code","source":"# Convert timestamp to datetime if itâ€™s not already\ndf_sample = df.head(500)\ndf['Timestamp'] = pd.to_datetime(df['Timestamp'])\n\n# Plot time-series for key variables\nplt.figure(figsize=(14, 8))\nfor col in ['Temperature', 'Dissolved Oxygen', 'Chlorophyll', 'pH', 'Salinity']:\n    plt.plot(df_sample['Timestamp'], df_sample[col], label=col)\n\nplt.legend()\nplt.title('Time Series of Key Environmental Variables')\nplt.xlabel('Timestamp')\nplt.ylabel('Value')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T07:10:51.23151Z","iopub.execute_input":"2024-09-22T07:10:51.231898Z","iopub.status.idle":"2024-09-22T07:10:51.671599Z","shell.execute_reply.started":"2024-09-22T07:10:51.231861Z","shell.execute_reply":"2024-09-22T07:10:51.670721Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 1.4.7 3D plot: Temperature vs Salinity vs Time","metadata":{}},{"cell_type":"code","source":"from mpl_toolkits.mplot3d import Axes3D\n\n# Prepare the data\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, projection='3d')\n\n# Use the first 1000 rows to prevent clutter\ndf_sample = df.head(1000)\n\n# Convert Timestamp to a numerical value (e.g., seconds since epoch)\ndf_sample['Timestamp'] = pd.to_datetime(df_sample['Timestamp']).astype(int) / 10**9\n\n# Drop duplicates if necessary\ndf_sample = df_sample.drop_duplicates(subset=['Timestamp', 'Salinity', 'Temperature'])\n\n# Create a 3D plot\nax.plot_trisurf(df_sample['Timestamp'], df_sample['Salinity'], df_sample['Temperature'], cmap='coolwarm', linewidth=0.2)\n\nax.set_title('3D Surface Plot: Temperature vs. Salinity vs. Time', fontsize=16)\nax.set_xlabel('Timestamp')\nax.set_ylabel('Salinity')\nax.set_zlabel('Temperature')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T07:17:02.342464Z","iopub.execute_input":"2024-09-22T07:17:02.343339Z","iopub.status.idle":"2024-09-22T07:17:02.757379Z","shell.execute_reply.started":"2024-09-22T07:17:02.343302Z","shell.execute_reply":"2024-09-22T07:17:02.756369Z"},"_kg_hide-output":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 1.5 Supervised ML implementation","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}